buildscript {
	ext {
		jooqVersion = '3.19.5'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'nu.studer.jooq' version '9.0'
}

group = 'org.sight'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

sourceSets {
	main {
		java {
			srcDirs = ["src/main/java", "src/generated"]
		}
	}
}

dependencies {
	implementation "org.jooq:jooq:${jooqVersion}"

	jooqGenerator project(':jOOQ-custom')
	jooqGenerator project(':entity')
	jooqGenerator "org.jooq:jooq:${jooqVersion}"
	jooqGenerator "org.jooq:jooq-meta:${jooqVersion}"
	jooqGenerator "org.jooq:jooq-meta-extensions-hibernate:${jooqVersion}"
	jooqGenerator 'com.h2database:h2:1.4.200'


	implementation 'org.springframework.boot:spring-boot-starter'
	implementation ('org.springframework.boot:spring-boot-starter-jooq') {
		exclude group: 'org.jooq'
	}

	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
	useJUnitPlatform()
}

String dbUser   = System.properties["db-user"]   ?: "root"
String dbPasswd = System.properties["db-passwd"] ?: "passwd"

jooq {
	version = "${jooqVersion}"
	configurations {
		sakilaDB {
			generationTool {
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'

					database {
						name = 'org.jooq.meta.extensions.jpa.JPADatabase'
						unsignedTypes = true
						properties {
							property {
								key = 'packages'
								value = 'com.sight.entity'
							}

							// DSL 생성시, jpa의 AttributeConverters 에 따라 jooq DSL의 타입을 매핑할지 여부
							property {
								key = 'useAttributeConverters'
								value = true
							}
						}

						forcedTypes {
							forcedType {
								userType = 'java.lang.Long'
								includeTypes = 'int unsigned'
							}

							forcedType {
								userType = 'java.lang.Integer'
								includeTypes = 'tinyint unsigned'
							}

							forcedType {
								userType = 'java.lang.Integer'
								includeTypes = 'smallint unsigned'
							}
						}
					}

					generate {
						daos = true
						records = true
						fluentSetters = true
						javaTimeTypes = true
						deprecated = false
					}

					target {
						directory = 'src/generated'
					}
					// 왜 서브 모듈로까지 분리를 하지?
					strategy.name = 'jooq.custom.generator.JPrefixGeneratorStrategy'
				}
			}
		}
	}
}
